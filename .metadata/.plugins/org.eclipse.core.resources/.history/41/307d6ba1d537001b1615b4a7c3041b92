package dpTopics;

public class Knapsack01 {

	static int[][] dp;
	public static int knapsack(int[] weight, int[] value, int capacity, int index) {
//		if (dp[capacity][index] != -1) return dp[capacity][index];
		if (capacity == 0) return 0;
		if (index >= weight.length) return 0;
		if (capacity < weight[index]) return knapsack(weight, value, capacity, index+1);
		
		// scenario including me
		int ans1 = knapsack(weight, value, capacity - weight[index], index+1) + value[index];
		// scenario excluding me
		int ans2 = knapsack(weight, value, capacity, index+1);
		
//		dp[capacity][index] = Math.max(ans1, ans2);
//		return dp[capacity][index];
		return Math.max(ans1, ans2);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] weight = {50, 100, 150, 200};
		int[] value = {8, 16, 32, 40};
		int capacity = 165;
		dp = new int[capacity+1][weight.length+1];
		for (int i = 0; i <= capacity; i++) {
			for (int j = 0; j <= weight.length; j++) {
				dp[i][j] = -1;
			}
		}
		System.out.println(knapsack(weight, value, capacity,0));

	}

}
