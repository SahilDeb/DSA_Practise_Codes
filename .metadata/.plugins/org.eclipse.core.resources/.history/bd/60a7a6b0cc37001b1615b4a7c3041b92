package dpTopics;

// Time Complexity reduced from O(2^(m+n)) -> O(m*n)
public class UniquePaths {
	static int[][] dp;
	public static int uniquePaths(int m, int n) {
		// result of dp[m][n] == result[n][m]
		if (dp[m][n] != 0 || dp[n][m] != 0) return dp[m][n];
		if (m == 0 || n == 0) return 1;
		if (m < 0 || n < 0) return 0;
		dp[m][n] = uniquePaths(m-1, n) + uniquePaths(m, n-1); 
		return dp[m][n];
	}
	
	public static void printArray(int[][] arr) {
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}
	
	public static int uniquePathsIter(int m, int n) {
		int[][] memo = new int[m][n];
		for (int i = 0; i < m; i++) memo[i][0] = 1;
		for (int i = 0; i < n; i++) memo[0][i] = 1;
		
		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				memo[i][j] = memo[i][j-1] + memo[i-1][j];
				printArray(memo);
			}
		}
		
		return memo[m-1][n-1];
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int m = 3;
		int n = 7;
		dp = new int[m][n];
//		System.out.println(uniquePaths(m-1, n-1));
		System.out.println(uniquePathsIter(3, 7));
	}

}
