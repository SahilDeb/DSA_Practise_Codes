package dpTopics;

// Time Complexity reduced from O(2^(m+n)) -> O(m*n)
public class UniquePaths {
	static int[][] dp;
	public static int uniquePaths(int m, int n) {
		// result of dp[m][n] == result[n][m]
		if (dp[m][n] != 0 || dp[n][m] != 0) return dp[m][n];
		if (m == 0 || n == 0) return 1;
		if (m < 0 || n < 0) return 0;
		dp[m][n] = uniquePaths(m-1, n) + uniquePaths(m, n-1); 
		return dp[m][n];
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int m = 3;
		int n = 7;
		dp = new int[m][n];
		System.out.println(uniquePaths(m-1, n-1));
	}

}
